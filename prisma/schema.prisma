generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//BOMer data model

model Product {
  id                    Int                   @id @default(autoincrement())
  erpId                 String?
  name                  String
  description           String
  pricePurchase         Decimal               @default(0)
  priceSell             Decimal               @default(0)
  productIsSupplied     Boolean
  productIsManufactured Boolean
  supplierId            Int?
  Bom                   Bom[]
  SalesOrderLine        SalesOrderLine[]
  leadTimeDays          Int? //avg lead time to get the part
  moq                   Int? //minimum order quantity
  eoq                   Int? //economic order quantity
  reorderQty            Int? //at what point should a new part be ordered
  createdAt             DateTime              @default(now())
  productTagOnProduct   productTagOnProduct[]
  updatedAt             DateTime              @updatedAt
  Supplier              Supplier?             @relation(fields: [supplierId], references: [id])
}

model Material {
  id            Int          @id @default(autoincrement())
  erpId         String?
  name          String?
  description   String?      @unique
  pricePurchase Decimal      @default(0)
  priceSell     Decimal      @default(0)
  supplier      Supplier?    @relation(fields: [supplierId], references: [id])
  supplierId    Int?
  leadTimeDays  Int? //avg lead time to get the part
  moq           Int? //minimum order quantity
  eoq           Int? //economic order quantity
  reorderQty    Int? //at what point should a new part be ordered
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  IsPartOfBoms  BomEntry[]
}

model ProductTag {
  id                  Int                   @id @default(autoincrement())
  name                String
  createAt            DateTime              @default(now())
  productTagOnProduct productTagOnProduct[]
  updatedAt           DateTime              @updatedAt
}

model productTagOnProduct {
  product      Product    @relation(fields: [productId], references: [id])
  productId    Int
  productTag   ProductTag @relation(fields: [productTagId], references: [id])
  productTagId Int
  assignedAt   DateTime   @default(now())

  @@id([productId, productTagId])
}

model Supplier {
  id        Int        @id @default(autoincrement())
  name      String?    @unique
  vat       String?
  iban      String?
  bic       String?
  phone     String?
  email     String?
  website   String?
  shop      String?
  Product   Product[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Material  Material[]
}

model Bom {
  id               Int                @id @default(autoincrement())
  productId        Int
  rootProduct      Product?           @relation(fields: [productId], references: [id])
  description      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  BomEntry         BomEntry[]
  BomCategoryOnBom BomCategoryOnBom[]
}

model BomCategory {
  id               Int                @id @default(autoincrement())
  name             String
  BomCategoryOnBom BomCategoryOnBom[]
}

model BomCategoryOnBom {
  bom           Bom         @relation(fields: [bomId], references: [id])
  bomId         Int
  bomCategory   BomCategory @relation(fields: [bomCategoryId], references: [id])
  bomCategoryId Int
  assignedAt    DateTime    @default(now())

  @@id([bomId, bomCategoryId])
}

model BomEntry {
  id         Int       @id @default(autoincrement())
  bom        Bom       @relation(fields: [bomId], references: [id])
  bomId      Int
  quantity   Decimal //number of times that product goes in bom
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Material   Material? @relation(fields: [materialId], references: [id])
  materialId Int?
}

model SalesOrder {
  id             Int              @id @default(autoincrement())
  ref            String?
  SalesOrderLine SalesOrderLine[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  totalPrice     Decimal
  Integration    Integration      @relation(fields: [integrationId], references: [id])
  integrationId  Int
}

model SalesOrderLine {
  id             Int        @id @default(autoincrement())
  productId      Int
  product        Product?   @relation(fields: [productId], references: [id])
  salesOrderId   Int
  salesOrder     SalesOrder @relation(fields: [salesOrderId], references: [id])
  quantity       Decimal?
  priceProduct   Decimal?
  priceLineTotal Decimal? //quantity*priceProduct
}

model Integration {
  id         Int          @id @default(autoincrement())
  name       String
  color      String
  SalesOrder SalesOrder[]
}
